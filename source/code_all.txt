import {PrismaClient} from "@prisma/client";
import {ProjectTable} from "./table/projectTable";
import {Project_old} from "./row/project";

export class Database {
    private _cors: any;
    private _prisma: any;
    private _projects: ProjectTable;
    private _app: any;
    private _PORT: number;
    private _bodyParser: any;

    constructor(prisma: PrismaClient ) {
        this.prisma = prisma;
        this.projects = new ProjectTable(prisma);
        this.setup_express();
    }


    get bodyParser(): any { return this._bodyParser;
    }

    set bodyParser(value: any) {
        this._bodyParser = value;
    }

    get cors(): any {
        return this._cors;
    }
    set cors(value: any) {
        this._cors = value;
    }
    get projects(): ProjectTable {
        return this._projects;
    }
    set projects(value: ProjectTable) {
        this._projects = value;
    }
    get prisma(): any {
        return this._prisma;
    }
    set prisma(value: any) {
        this._prisma = value;
    }
    get app(): any {
        return this._app;
    }
    set app(value: any) {
        this._app = value;
    }

    async read() {
        await this.projects.read();
    }

    setup_express(){
        this._cors = require('cors');
        this._app = require('express')();
        this._bodyParser = require('body-parser');
        this.app.use(this.bodyParser.json());
        this._PORT = 8080;
        this.allow_any_sites_to_talk_with_this_id();
    }

    private allow_any_sites_to_talk_with_this_id() {
        this.app.use(this.cors({origin: '*'}));
    }

    async start_server() {
        await this.read();
        await this.run_apis();
    //    runt he code every 2 seconds
        setInterval(async () => {
            await this.read()
        }, 2000);
    }


    async run_apis() {
        this.start_listen();
        this.projects_CRUD();
        this.project_CRUD();
    }

    private projects_CRUD() {
        this.projects_read();
    }

    private projects_read() {
        this.app.get('/projects', (req: any, res: any) => {
            // res.setHeader('Access-Control-Allow-Origin', '*');
            res.status(200).send(res.json(this.projects.get_ready_to_send_over_rest_api()));
            //parse the object to json
            console.log(this.projects.get_ready_to_send_over_rest_api());
            //console log time
            console.log(new Date().toLocaleTimeString());
        });
    }

    private project_CRUD() {
        this.project_read();
        this.project_create();
        this.project_update();
        this.project_delete();
    }

    private project_read() {
        this.app.get('/project/:id', (req: any, res: any) => {
            res.setHeader('Access-Control-Allow-Origin', '*');
            const project = this.get_current_project(req);
            //if projects undefiend
            if(project === undefined) {
                res.status(404).send({"message" : "Project_old not found"});
            } else {
                res.status(200).send(project.get_ready_to_send_over_rest_api());
            }
            console.log(new Date().toLocaleTimeString());
            console.log(project.get_ready_to_send_over_rest_api());
        });
    }

    private project_create() {
        this.app.post('/project', async (req: any, res: any) => {
            this.allow_acces_for_every_ip(res);
            const project_recieved_from_client = this.create_project_using_request(req);
            console.log(project_recieved_from_client);

                this.projects.create_project(project_recieved_from_client)
                    .then(async () => {
                        console.log(this.projects);
                        console.log("Project_old created");
                        res.status(200).send({"message" : "Project_old created"});
                        this.read();
                    }).catch((error: any) => {
                    console.log("Someone tryed to creat a project with an existing ID");
                    res.status(500).send({"message": "PRIMARY"});
                });
        });
    }

    private allow_acces_for_every_ip(res: any) {
        res.setHeader('Access-Control-Allow-Origin', '*');
    }

    private create_project_using_request(req: any) {
        let project = new Project_old(
            this.prisma,
            req.body.ID,
            req.body.Standort,
            req.body.Niederlassung,
            req.body.Auftragsart,
            req.body.Status,
            req.body.Logistikkoordinator,
            req.body.LK_1,
            req.body.LK_2,
            req.body.ZuKo,
            req.body.Auftragsdatum,
            req.body.Startdatum,
            req.body.Endtermin,
            req.body.Netto_Auftragswert,
            req.body.Kommentar,
            req.body.Anlagenummer,
            req.body.PM_1,
            req.body.PM_2
        );
        return project;
    }

    private get_current_project(req: any) {
        const id = req.body.ID;
        let project : Project_old = this.projects.project[id];
        if (project === undefined) {
            throw new Error("Project_old not found");
        }
        return project;
    }


    private start_listen() {
        this.app.listen(this._PORT, () => {
            console.log(`Server running on port ${this._PORT}`);
        });
    }

    private project_update() {
        let request_project : Project_old;
        this.app.put('/project', (req: any, res: any) => {
            this.allow_communikation_from_all_ip_adress(res);
            try{
                request_project = this.create_project_using_request(req);
                this.projects.get_project(request_project.ID);
                this.projects.update_project(request_project);
                res.status(200).send({"message" : "Project_old updated"});
            } catch (e) {
                res.status(404).send({"message" : e.message});
            }
        });
    }

    private allow_communikation_from_all_ip_adress(res: any) {
        res.setHeader('Access-Control-Allow-Origin', '*');
    }

    private project_delete() {
        this.app.delete('/project/:id', (req: any, res: any) => {
            this.allow_communikation_from_all_ip_adress(res);

        function get_id() {
            let id = req.params.id;
            return parseInt(id);
        }

        let id = get_id();
        this.projects.delete_project(id)
            .then(() => {
                res.status(200).send({"message" : "Project_old deleted"});
                this.projects.read();
            }).catch((error: any) => {
                res.status(404).send({"message" : error.message});
            });
        });
    }
}

//toDo: delte length, we have to use onlye the this.projects.lengthimport {PrismaClient} from "prisma/prisma-client/scripts/default-index";
import {I_CRUD} from "../../Interface/I_CRUD";
import {I_Project} from "../../Interface/row/I_Project";

export class Project_old implements I_Project, I_CRUD {

    //toDo: fuhre LK, Zuko und Pm zu einer Tabelle zusammen
    private _prisma: PrismaClient;
    private _ID:                     number;
    private _Standort:               String;
    private _Niederlassung:          String;
    private _Auftragsart:            String;
    private _Status:                 String;
    private _Logistikkoordinator:    String;
    private _LK_1:                   String;
    private _LK_2:                   String;
    private _ZuKo:                   String;
    private _Auftragsdatum:          Date;
    private _Startdatum:             Date;
    private _Endtermin:              Date;
    private _Netto_Auftragswert:     String;
    private _Kommentar:              String;
    private _Anlagenummer:           number;
    private _PM_1:                   String;
    private _PM_2:                   String;

    get Endtermin(): Date {
        return this._Endtermin;
    }
    set Endtermin(value: Date) {
        this._Endtermin = value;
    }
    get PM_2(): String {
        return this._PM_2;
    }
    set PM_2(value: String) {
        this._PM_2 = value;
    }
    get PM_1(): String {
        return this._PM_1;
    }
    set PM_1(value: String) {
        this._PM_1 = value;
    }
    get Anlagenummer(): number {
        return this._Anlagenummer;
    }
    set Anlagenummer(value: number) {
        this._Anlagenummer = value;
    }
    get Kommentar(): String {
        return this._Kommentar;
    }
    set Kommentar(value: String) {
        this._Kommentar = value;
    }
    get Netto_Auftragswert(): String {
        return this._Netto_Auftragswert;
    }
    set Netto_Auftragswert(value: String) {
        this._Netto_Auftragswert = value;
    }
    get Startdatum(): Date {
        return this._Startdatum;
    }
    set Startdatum(value: Date) {
        this._Startdatum = value;
    }
    get Auftragsdatum(): Date {
        return this._Auftragsdatum;
    }
    set Auftragsdatum(value: Date) {
        this._Auftragsdatum = value;
    }
    get ZuKo(): String {
        return this._ZuKo;
    }
    set ZuKo(value: String) {
        this._ZuKo = value;
    }
    get LK_2(): String {
        return this._LK_2;
    }
    set LK_2(value: String) {
        this._LK_2 = value;
    }
    get LK_1(): String {
        return this._LK_1;
    }
    set LK_1(value: String) {
        this._LK_1 = value;
    }
    get Logistikkoordinator(): String {
        return this._Logistikkoordinator;
    }
    set Logistikkoordinator(value: String) {
        this._Logistikkoordinator = value;
    }
    get Status(): String {
        return this._Status;
    }
    set Status(value: String) {
        this._Status = value;
    }
    get Auftragsart(): String {
        return this._Auftragsart;
    }
    set Auftragsart(value: String) {
        this._Auftragsart = value;
    }
    get Niederlassung(): String {
        return this._Niederlassung;
    }
    set Niederlassung(value: String) {
        this._Niederlassung = value;
    }
    get Standort(): String {
        return this._Standort;
    }
    set Standort(value: String) {
        this._Standort = value;
    }
    get ID(): number {
        return this._ID;
    }
    set ID(value: number) {
        this._ID = value;
    }
    get prisma(): PrismaClient {
        return this._prisma;
    }
    set prisma(value: PrismaClient) {
        this._prisma = value;
    }


    constructor(
        prisma: PrismaClient,
                ID: number,
                Standort?: String,
                Niederlassung?: String,
                Auftragsart?: String,
                Status?: String,
                Logistikkoordinator?: String,
                LK_1?: String,
                LK_2?: String,
                ZuKo?: String,
                Auftragsdatum?: Date,
                Startdatum?: Date,
                Endtermin?: Date,
                Netto_Auftragswert?: String,
                Kommentar?: String,
                Anlagenummer?: number,
                PM_1?: String,
                PM_2?: String
    ) {
        this.prisma = prisma;
        this.ID = ID;
        this.Standort = Standort || "";
        this.Niederlassung = Niederlassung || "";
        this.Auftragsart = Auftragsart || "";
        this.Status = Status || "";
        this.Logistikkoordinator = Logistikkoordinator || "";
        this.LK_1 = LK_1 || "";
        this.LK_2 = LK_2 || "";
        this.ZuKo = ZuKo || "";
        this.Auftragsdatum = Auftragsdatum || new Date(0);
        this.Startdatum = Startdatum || new Date(0);
        this.Endtermin = Endtermin || new Date(0);
        this.Netto_Auftragswert = Netto_Auftragswert || "";
        this.Kommentar = Kommentar || "";
        this.Anlagenummer = Anlagenummer || 0;
        this.PM_1 = PM_1 || "";
        this.PM_2 = PM_2 || "";
    }

    async create() {
        await this.prisma.tblprojekte.create({
            data: {
                ID: this.ID,
                Standort: this.Standort || "",
                Niederlassung: this.Niederlassung || "",
                Auftragsart: this.Auftragsart || "",
                Status: this.Status || "",
                Logistikkoordinator: this.Logistikkoordinator || "",
                LK_1: this.LK_1 || "",
                LK_2: this.LK_2 || "",
                ZuKo: this.ZuKo || "",
                Auftragsdatum: this.Auftragsdatum || "",
                Startdatum: this.Startdatum || "",
                Endtermin: this.Endtermin || "",
                Netto_Auftragswert: this.Netto_Auftragswert || "",
                Kommentar: this.Kommentar || "",
                Anlagenummer: this.Anlagenummer || 0,
                PM_1: this.PM_1 || "",
                PM_2: this.PM_2 || "",
            }
        })
    }

    async read(id?: number) {
        //read form database if projects exists then set this.name = name from db
        await this._prisma.tblprojekte.findMany({
            where: {
                ID: id || this.ID
            }
        }).then((result: any) => {
            if(result.length > 0) {
                this.Standort = result[0].Standort;
                this.Niederlassung = result[0].Niederlassung;
                this.Auftragsart = result[0].Auftragsart;
                this.Status = result[0].Status;
                this.Logistikkoordinator = result[0].Logistikkoordinator;
                this.LK_1 = result[0].LK_1;
                this.LK_2 = result[0].LK_2;
                this.ZuKo = result[0].ZuKo;
                this.Auftragsdatum = result[0].Auftragsdatum;
                this.Startdatum = result[0].Startdatum;
                this.Endtermin = result[0].Endtermin;
                this.Netto_Auftragswert = result[0].Netto_Auftragswert;
                this.Kommentar = result[0].Kommentar;
                this.Anlagenummer = result[0].Anlagenummer;
                this.PM_1 = result[0].PM_1;
                this.PM_2 = result[0].PM_2;
            } else {
                throw new Error("Project_old not found in db");
            }
        }).catch(
            () => {
                throw new Error("Project_old not found in db");
            }
        )
    }

    async update() {
        await this._prisma.tblprojekte.update({
            where: {
                ID: this.ID
            },
            data: {
                Standort: this.Standort,
                Niederlassung: this.Niederlassung,
                Auftragsart: this.Auftragsart,
                Status: this.Status,
                Logistikkoordinator: this.Logistikkoordinator,
                LK_1: this.LK_1,
                LK_2: this.LK_2,
                ZuKo: this.ZuKo,
                Auftragsdatum: this.Auftragsdatum,
                Startdatum: this.Startdatum,
                Endtermin: this.Endtermin,
                Netto_Auftragswert: this.Netto_Auftragswert,
                Kommentar: this.Kommentar,
                Anlagenummer: this.Anlagenummer,
                PM_1: this.PM_1,
                PM_2: this.PM_2,
            }
        }).then((result: any) => {
            console.log("updated");
        })
    }

    async delete() {
        await this._prisma.tblprojekte.delete({
            where: {
                ID: this.ID
            }
        });
    }


    public async project_exists_in_db(): Promise<boolean> {
        const users = await this._prisma.tblprojekte.findMany
        (
            {
                where: {
                    ID: this.ID,
                    Standort: this.Standort,
                    Niederlassung: this.Niederlassung,
                    Auftragsart: this.Auftragsart,
                    Status: this.Status,
                    Logistikkoordinator: this.Logistikkoordinator,
                    LK_1: this.LK_1,
                    LK_2: this.LK_2,
                    ZuKo: this.ZuKo,
                    Auftragsdatum: this.Auftragsdatum,
                    Startdatum: this.Startdatum,
                    Endtermin: this.Endtermin,
                    Netto_Auftragswert: this.Netto_Auftragswert,
                    Kommentar: this.Kommentar,
                    Anlagenummer: this.Anlagenummer,
                    PM_1: this.PM_1,
                    PM_2: this.PM_2,
                }
            }
        );
        return users.length > 0;
    }

    get_ready_to_send_over_rest_api(): any {
        return {
            Prisma: null,
            ID: this.ID,
            Standort: this.Standort,
            Niederlassung: this.Niederlassung,
            Auftragsart: this.Auftragsart,
            Status: this.Status,
            Logistikkoordinator: this.Logistikkoordinator,
            LK_1: this.LK_1,
            LK_2: this.LK_2,
            ZuKo: this.ZuKo,
            Auftragsdatum: this.Auftragsdatum,
            Startdatum: this.Startdatum,
            Endtermin: this.Endtermin,
            Netto_Auftragswert: this.Netto_Auftragswert,
            Kommentar: this.Kommentar,
            Anlagenummer: this.Anlagenummer,
            PM_1: this.PM_1,
            PM_2: this.PM_2,
        }
    }

}


export function generate_test_project(prisma: PrismaClient, i: number): Project_old {

    let random_komments_rick_and_morty = [
        "I'm Pickle Rick!",
        "Wubba Lubba Dub Dub!",
        "I'm Mr. Meeseeks, look at me!",
        "Sometimes science is a lot more art, than science. A lot of people don't get that.",
        " I'm not a scientist. I'm a mad scientist.",
        "I did it. Your parents are going to do it. Break the cycle Morty, rise above, focus on science.",
        "Having a family doesn't mean that you stop being an individual.",
        "Great, now I have to take over an entire planet because of your stupid boobs.",
    ]

    let project = new Project_old(prisma, i);
    project.Standort = "Standort" + i;
    project.Niederlassung = "Niederlassung" + i;
    project.Auftragsart = "Auftragsart" + i;
    project.Status = "Status" + i;
    project.Logistikkoordinator = "Logistikkoordinator" + i;
    project.LK_1 = "LK_1" + i;
    project.LK_2 = "LK_2" + i;
    project.ZuKo = "ZuKo" + i;
    project.Auftragsdatum = new Date(i);
    project.Startdatum = new Date(i);
    project.Endtermin = new Date(i)
    project.Netto_Auftragswert = "Netto_Auftragswert" + i;
    project.Kommentar = random_komments_rick_and_morty[i % random_komments_rick_and_morty.length]
    project.Anlagenummer = i;
    project.PM_1 = "PM_1" + i;
    project.PM_2 = "PM_2" + i;
    return project;
}
import {generate_test_project, Project_old} from "../row/project";
import {PrismaClient} from "prisma/prisma-client/scripts/default-index";
import assert = require("assert");
import {I_Projects} from "../../Interface/table/I_Projects";
import {I_CRUD} from "../../Interface/I_CRUD";

//create public class ProjectTable
export  class ProjectTable implements I_Projects{
    private _project: Project_old[];
    private _length: number;
    private _prisma: PrismaClient;

    get project(): Project_old[] {
        return this._project;
    }
    get_project(number: number) : Project_old {
        for (let i = 0; i < this._project.length; i++) {
            if (this._project[i].ID == number) {
                return this._project[i];
            }
        }
        throw new Error("Project_old not found");
    }
    set project(value: Project_old[]) {
        this._project = value;
    }

    get length(): number {
        return this._length;
    }
    set length(value: number) {
        this._length = value;
    }

    get prisma(): PrismaClient {
        return this._prisma;
    }
    set prisma(value: PrismaClient) {
        this._prisma = value;
    }


    //create constructor
    constructor(prisma: PrismaClient) {
        this._prisma = prisma;
        this._project = []
        this._length = 0
    }

    //toDo: Promise.All
    async create(...args: any[]): Promise<any> {
        for (let i = 0; i < this._project.length; i++) {
            await this._project[i].create()
        }
        this._length = this._project.length;
    }
    async read(...args: any[]) {
        this._project = [];
        await this._prisma.tblprojekte.findMany()
            .then((result: any) => {
                for (let i = 0; i < result.length; i++) {
                    let project: Project_old = new Project_old(
                        this._prisma,
                        result[i].ID,
                        result[i].Standort,
                        result[i].Niederlassung,
                        result[i].Auftragsart,
                        result[i].Status,
                        result[i].Logistikkoordinator,
                        result[i].LK_1,
                        result[i].LK_2,
                        result[i].ZuKo,
                        result[i].Auftragsdatum,
                        result[i].Startdatum,
                        result[i].Endtermin,
                        result[i].Netto_Auftragswert,
                        result[i].Kommentar,
                        result[i].Anlagenummer,
                        result[i].PM_1,
                        result[i].PM_2
                    );
                    this._project.push(project);
                }
                this._length = this._project.length;
            });
    }

    async delete(...args: any[]) {
        return await this._prisma.tblprojekte.deleteMany()
            .then(() => {
              this._length = 0;
              this.project = [];
            }).then(() => {
                assert(this._length == 0);
        });
    }


    async update(...args: any[]): Promise<any> {
        for (let i = 0; i < this._project.length; i++) {
            await this._project[i].update();
        }
    }


    generate_array_of_projects(start: number, end: number) {
        this.project = [];
        for (let i = start; i <= end; i++) {
            let project: Project_old = generate_test_project(this._prisma, i);
            this._project.push(project);
        }
        this._length = this._project.length;
    }

    print() {
        for (let i = 0; i < this._project.length; i++) {
            console.log("Id:" + this._project[i].ID +
                " Standort:" + this._project[i].Standort +
                " Niederlassung:" + this._project[i].Niederlassung +
                " Auftragsart:" + this._project[i].Auftragsart +
                " Status:" + this._project[i].Status +
                " Logistikkoordinator:" + this._project[i].Logistikkoordinator +
                " LK_1:" + this._project[i].LK_1 +
                " LK_2:" + this._project[i].LK_2 +
                " ZuKo:" + this._project[i].ZuKo +
                " Auftragsdatum:" + this._project[i].Auftragsdatum +
                " Startdatum:" + this._project[i].Startdatum +
                " Endtermin:" + this._project[i].Endtermin +
                " Netto_Auftragswert:" + this._project[i].Netto_Auftragswert +
                " Kommentar:"  + this._project[i].Kommentar +
                " Anlagenummer:" + this._project[i].Anlagenummer +
                " PM_1:" + this._project[i].PM_1 +
                " PM_2:" + this._project[i].PM_2
            );
        }
    }

    get_ready_to_send_over_rest_api() {
        let projects_to_send: any[] = [];
        for (let i = 0; i < this._project.length; i++) {
            projects_to_send.push(new Project_to_send(
                this._project[i].ID,
                this._project[i].Standort,
                this._project[i].Niederlassung,
                this._project[i].Auftragsart,
                this._project[i].Status,
                this._project[i].Logistikkoordinator,
                this._project[i].LK_1,
                this._project[i].LK_2,
                this._project[i].ZuKo,
                this._project[i].Auftragsdatum,
                this._project[i].Startdatum,
                this._project[i].Endtermin,
                this._project[i].Netto_Auftragswert,
                this._project[i].Kommentar,
                this._project[i].Anlagenummer,
                this._project[i].PM_1,
                this._project[i].PM_2
                )
            );
        }
        return projects_to_send
    }

    async create_project(project: Project_old) {
        if(this.project_with_this_number_already_exists(project.ID)) {
            throw new Error("PRIMARY");
        }
        this._project.push(project);
        this._length = this._project.length;
        return await project.create();
    }

    project_with_this_number_already_exists(ID: number) : boolean {
        for (let i = 0; i < this._project.length; i++) {
            if(this._project[i].ID == ID) {
                return true;
            }
        }
        return false;
    }

    update_project(project: Project_old) {

        this.project[project.ID] = project;
        this._project[project.ID].update()
    }

    async delete_project(id: number) {
        if (this.project_with_this_number_already_exists(id)) {
            for (let i = 0; i < this._project.length; i++) {
                if(this._project[i].ID == id) {
                    this._project[i].delete()
                        .then(
                            () => {
                                this._project.splice(i, 1);
                                this._length = this._project.length;
                            }
                        )
                }
            }
        } else {
            throw new Error("Don't exist");
        }
    }
}

//toDo: implenet this as a sub class of Project_old
//create project send interface
export class Project_to_send implements Project_send {
    ID:                     number;
    Standort:               String;
    Niederlassung:          String;
    Auftragsart:            String;
    Status:                 String;
    Logistikkoordinator:    String;
    LK_1:                   String;
    LK_2:                   String;
    ZuKo:                   String;
    Auftragsdatum:          Date;
    Startdatum:             Date;
    Endtermin:              Date;
    Netto_Auftragswert:     String;
    Kommentar:              String;
    Anlagenummer:           number;
    PM_1:                   String;
    PM_2:                   String;

    constructor(
        ID: any, Standort: any, Niederlassung: any, Auftragsart: any, Status: any, Logistikkoordinator: any,
        LK_1: any, LK_2: any, ZuKo: any, Auftragsdatum: any, Startdatum: any,
        Endtermin: any, Netto_Auftragswert: any, Kommentar: any, Anlagenummer: any, PM_1: any, PM_2: any
    ) {
        this.ID = ID;
        this.Standort = Standort;
        this.Niederlassung = Niederlassung;
        this.Auftragsart = Auftragsart;
        this.Status = Status;
        this.Logistikkoordinator = Logistikkoordinator;
        this.LK_1 = LK_1;
        this.LK_2 = LK_2;
        this.ZuKo = ZuKo;
        this.Auftragsdatum = Auftragsdatum;
        this.Startdatum = Startdatum;
        this.Endtermin = Endtermin;
        this.Netto_Auftragswert = Netto_Auftragswert;
        this.Kommentar = Kommentar;
        this.Anlagenummer = Anlagenummer;
        this.PM_1 = PM_1;
        this.PM_2 = PM_2;
    }
}

export interface Project_send {
    ID:                     number;
    Standort:               String;
    Niederlassung:          String;
    Auftragsart:            String;
    Status:                 String;
    Logistikkoordinator:    String;
    LK_1:                   String;
    LK_2:                   String;
    ZuKo:                   String;
    Auftragsdatum:          Date;
    Startdatum:             Date;
    Endtermin:              Date;
    Netto_Auftragswert:     String;
    Kommentar:              String;
    Anlagenummer:           number;
    PM_1:                   String;
    PM_2:                   String;
}
import {PrismaClient} from "@prisma/client";
import {Database} from "./Classes/database";
let prisma: PrismaClient = new PrismaClient();

let database: Database = new Database(prisma);

async function start() {
    async function create_test_enviroment() {
        await database.projects.delete();
        await database.projects.generate_array_of_projects(0, 9);
        await database.projects.create();
    }
    // await create_test_enviroment();
    await database.start_server();
}

start();


export interface I_CRUD{
    create  (...args: any[]): any;
    read    (...args: any[]): any;
    update  (...args: any[]): any;
    delete  (...args: any[]): any;
}import {I_CRUD} from "../I_CRUD";

export interface I_Project extends I_CRUD{
    ID:                     number;
    Standort:               String;
    Niederlassung:          String;
    Auftragsart:            String;
    Status:                 String;
    Logistikkoordinator:    String;
    LK_1:                   String;
    LK_2:                   String;
    ZuKo:                   String;
    Auftragsdatum:          Date;
    Startdatum:             Date;
    Endtermin:              Date;
    Netto_Auftragswert:     String;
    Kommentar:              String;
    Anlagenummer:           number;
    PM_1:                   String;
    PM_2:                   String;
}import {Project_old} from "../../Classes/row/project";
import {PrismaClient} from "prisma/prisma-client/scripts/default-index";
import {I_CRUD} from "../I_CRUD";

export interface I_Projects extends I_CRUD{
    project: Project_old[];
    length: number;
}